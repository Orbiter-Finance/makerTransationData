"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChainFactory = void 0;
const chainsService = __importStar(require("../chain"));
const chainWatch = __importStar(require("./index"));
const utils_1 = require("../utils");
class ChainFactory {
    static createWatchChainByIntranetId(intranetChainId) {
        let watchChain;
        const chainConfig = utils_1.chains.getChainByInternalId(intranetChainId);
        if (!chainConfig) {
            throw new Error(`Internal public Chain ID profile not found ${intranetChainId}`);
        }
        switch (chainConfig.internalId) {
            case "1":
            case "5":
            case "599":
                watchChain = new chainWatch.Ethereum(new chainsService.Ethereum(chainConfig));
                break;
            case "2":
            case "22":
                watchChain = new chainWatch.Arbitrum(new chainsService.Arbitrum(chainConfig));
                break;
            case "3":
            case "33":
                watchChain = new chainWatch.ZKSync(new chainsService.ZKSync(chainConfig));
                break;
            case "4":
            case "44":
                watchChain = new chainWatch.Starknet(new chainsService.Starknet(chainConfig));
                break;
            case "6":
            case "66":
                watchChain = new chainWatch.Polygon(new chainsService.Polygon(chainConfig));
                break;
            case "7":
            case "77":
                watchChain = new chainWatch.Optimism(new chainsService.Optimism(chainConfig));
                break;
            case "8":
            case "88":
                watchChain = new chainWatch.ImmutableX(new chainsService.ImmutableX(chainConfig));
                break;
            case "9":
            case "99":
                watchChain = new chainWatch.Loopring(new chainsService.Loopring(chainConfig));
                break;
            case "10":
            case "510":
                watchChain = new chainWatch.Metis(new chainsService.Metis(chainConfig));
                break;
            case "11":
            case "511":
                watchChain = new chainWatch.Dydx(new chainsService.Dydx(chainConfig));
                break;
            case "12":
            case "512":
                watchChain = new chainWatch.ZKSpace(new chainsService.ZKSpace(chainConfig));
                break;
            case "13":
            case "513":
                watchChain = new chainWatch.Boba(new chainsService.Boba(chainConfig));
                break;
            case "14":
            case "514":
                watchChain = new chainWatch.ZKSync2(new chainsService.ZKSync2(chainConfig));
                break;
            case "15":
            case "515":
                watchChain = new chainWatch.BSC(new chainsService.BSC(chainConfig));
                break;
            case "16":
            case "516":
                watchChain = new chainWatch.ArbitrumNova(new chainsService.ArbitrumNova(chainConfig));
                break;
            case "17":
            case "517":
                watchChain = new chainWatch.PolygonZKEVM(new chainsService.PolygonZKEVM(chainConfig));
                break;
            case "18":
            case "19":
            case "518":
            case "519":
                watchChain = new chainWatch.Scroll(new chainsService.Scroll(chainConfig));
                break;
            default:
                throw new Error(`Public chain id not found ${intranetChainId}`);
        }
        return watchChain;
    }
}
exports.ChainFactory = ChainFactory;
