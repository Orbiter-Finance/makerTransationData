"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZKSync2 = void 0;
// import BigNumber from "bignumber.js";
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const utils_1 = require("../utils");
const core_1 = require("../utils/core");
// import { abi, core } from "../utils";
const evm_explorer_service_1 = require("./evm-explorer.service");
class ZKSync2 extends evm_explorer_service_1.EvmExplorerService {
    convertTxToEntity(trx) {
        const _super = Object.create(null, {
            convertTxToEntity: { get: () => super.convertTxToEntity }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const txData = yield _super.convertTxToEntity.call(this, trx);
            if (txData) {
                const topics = utils_1.abi.decodeLogs(txData.receipt.logs);
                if (topics && topics.length == 2) {
                    for (const topic of topics) {
                        if (topic.name === "Transfer" && topic.events) {
                            if ((0, core_1.equals)(topic.events[1].value, "0xde03a0b5963f75f1c8485b355ff6d30f3093bde7")) {
                                txData.feeToken = yield this.getTokenSymbol(topic.address);
                                txData.fee = String(topic.events[2].value);
                            }
                            if ((0, core_1.equals)(topic.events[0].value, txData.from) &&
                                (0, core_1.equals)(topic.events[1].value, txData.to)) {
                                txData.from = topic.events[0].value;
                                txData.to = topic.events[1].value;
                                txData.value = new bignumber_js_1.default(topic.events[2].value);
                                txData.tokenAddress = topic.address;
                            }
                        }
                    }
                }
                // }
            }
            return txData;
        });
    }
}
exports.ZKSync2 = ZKSync2;
