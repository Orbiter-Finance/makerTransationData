"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EvmExplorerService = void 0;
const core_1 = require("../utils/core");
const etherscan_1 = __importStar(require("../utils/etherscan"));
const logger_1 = __importDefault(require("../utils/logger"));
const evm_chain_service_1 = require("./evm-chain.service");
class EvmExplorerService extends evm_chain_service_1.EVMChain {
    constructor(chainConfig) {
        super(chainConfig);
        this.chainConfig = chainConfig;
        this.apiClient = new etherscan_1.default(this.chainConfig.api.url, {
            apiKey: this.chainConfig.api.key,
            debug: this.chainConfig.debug,
        });
    }
    getTransactions(address, filter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const returnResponse = {
                txlist: [],
            };
            const response = yield this.apiClient.call(etherscan_1.EtherscanApiAction.AccountTxlist, filter);
            const { status, result } = response, responseExtra = __rest(response, ["status", "result"]);
            if (status !== "1") {
                throw new Error(`${this.chainConfig.name} GetTransactions Fail:${JSON.stringify(response)} , Params:${JSON.stringify(filter)}`);
            }
            Object.assign(returnResponse, responseExtra);
            for (const tx of result) {
                try {
                    if (!(0, core_1.isEmpty)(tx.from) && !(0, core_1.isEmpty)(tx.to)) {
                        const newTx = yield this.convertTxToEntity(tx);
                        newTx && returnResponse.txlist.push(newTx);
                    }
                }
                catch (error) {
                    logger_1.default.error(`getTransactions Error:${tx.hash}`, error);
                }
            }
            return returnResponse;
        });
    }
    getTokenTransactions(address, tokenAddress, filter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            //
            const returnResponse = {
                txlist: [],
            };
            const response = yield this.apiClient.call(etherscan_1.EtherscanApiAction.AccountTokentx, filter);
            const { status, result } = response, resExtra = __rest(response, ["status", "result"]);
            if (status !== "1") {
                throw new Error(`${this.chainConfig.name} getTokenTransactions Fail:${JSON.stringify(response)} , Params:${JSON.stringify(filter)}`);
            }
            Object.assign(returnResponse, resExtra);
            for (const tx of result) {
                try {
                    // const {
                    //   hash,
                    //   nonce,
                    //   blockHash,
                    //   blockNumber,
                    //   transactionIndex,
                    //   from,
                    //   to,
                    //   value,
                    //   gasPrice,
                    //   input,
                    //   contractAddress: tokenAddress,
                    //   gasUsed: gas,
                    //   timeStamp: timestamp,
                    //   confirmations,
                    //   ...extra
                    // } = tx;
                    // const symbol = isEmpty(tokenAddress)
                    //   ? this.chainConfig.nativeCurrency.symbol
                    //   : await this.getTokenSymbol(tokenAddress);
                    // const status =
                    //   extra.isError !== "1" || extra.txreceipt_status === "1"
                    //     ? TransactionStatus.COMPLETE
                    //     : TransactionStatus.Fail;
                    // const newTx = new Transaction({
                    //   chainId: this.chainConfig.chainId,
                    //   hash,
                    //   from,
                    //   to,
                    //   value: new BigNumber(value),
                    //   nonce,
                    //   blockHash,
                    //   blockNumber,
                    //   transactionIndex,
                    //   gasPrice,
                    //   gas,
                    //   input,
                    //   tokenAddress,
                    //   timestamp,
                    //   status,
                    //   fee:new BigNumber(gas).multipliedBy(gasPrice).toString(),
                    //   feeToken: this.chainConfig.nativeCurrency.symbol,
                    //   symbol,
                    //   confirmations,
                    //   extra,
                    //   source: "api",
                    // });
                    // if (equals(newTx.input, "deprecated")) {
                    //   // is deprecated
                    //   const rpcTx = await this.web3.eth.getTransaction(hash);
                    //   if (rpcTx) {
                    //     newTx.input = rpcTx.input;
                    //   }
                    // }
                    // returnResponse.txlist.push(newTx);
                    if (!(0, core_1.isEmpty)(tx.from) && !(0, core_1.isEmpty)(tx.to)) {
                        const newTx = yield this.convertTxToEntity(tx);
                        newTx && returnResponse.txlist.push(newTx);
                    }
                }
                catch (error) {
                    logger_1.default.error(`getTokenTransactions Error:${tx.hash}`, error);
                    throw error;
                }
            }
            return returnResponse;
        });
    }
    getInternalTransactions(address, filter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            //
            const returnResponse = {
                txlist: [],
            };
            const response = yield this.apiClient.call(etherscan_1.EtherscanApiAction.AccountTxlistinternal, filter);
            const { status, result } = response, resExtra = __rest(response, ["status", "result"]);
            if (status !== "1") {
                throw new Error(`${this.chainConfig.name} getInternalTransactions Fail:${JSON.stringify(response)} , Params:${JSON.stringify(filter)}`);
            }
            Object.assign(returnResponse, resExtra);
            for (const tx of result) {
                try {
                    if (!(0, core_1.isEmpty)(tx.from) && !(0, core_1.isEmpty)(tx.to)) {
                        const newTx = yield this.convertTxToEntity(tx);
                        newTx && returnResponse.txlist.push(newTx);
                    }
                }
                catch (error) {
                    logger_1.default.error(`getInternalTransactions Error:${tx.hash}`, error);
                    throw error;
                }
            }
            return returnResponse;
        });
    }
}
exports.EvmExplorerService = EvmExplorerService;
