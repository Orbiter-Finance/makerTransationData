"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cross_fetch_1 = __importDefault(require("cross-fetch"));
class Subgraph {
    constructor(endpoint) {
        this.endpoint = endpoint;
    }
    query(graphqlQuery) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = {
                "content-type": "application/json",
            };
            const options = {
                method: "POST",
                headers: headers,
                body: JSON.stringify(graphqlQuery),
            };
            const response = yield (0, cross_fetch_1.default)(this.endpoint, options);
            const data = yield response.json();
            return data.data["lpEntities"];
        });
    }
    getLP(_id) {
        return __awaiter(this, void 0, void 0, function* () {
            const graphqlQuery = {
                operationName: "fetchLpList",
                query: `query fetchLpList {
          lpEntities(where: {stopTime: null}) {
            id
            createdAt
            maxPrice
            minPrice
            sourcePresion
            destPresion
            tradingFee
            gasFee
            startTime
            stopTime
            maker {
              id
              owner
            }
            pair {
              id
              sourceChain
              destChain
              sourceToken
              destToken
              ebcId
            }
          }
        }`,
                variables: {},
            };
            const result = yield this.query(graphqlQuery);
            return result;
        });
    }
    getEffectLP(_id) {
        return __awaiter(this, void 0, void 0, function* () {
            return;
        });
    }
}
exports.default = Subgraph;
