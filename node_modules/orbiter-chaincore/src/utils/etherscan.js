"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EtherscanApiAction = void 0;
const qs_1 = require("qs");
// import axios from "axios";
const cross_fetch_1 = __importDefault(require("cross-fetch"));
var EtherscanApiAction;
(function (EtherscanApiAction) {
    EtherscanApiAction["AccountBalance"] = "account_balance";
    EtherscanApiAction["AccountBalancemulti"] = "account_balancemulti";
    EtherscanApiAction["AccountTxlist"] = "account_txlist";
    EtherscanApiAction["AccountTxlistinternal"] = "account_txlistinternal";
    EtherscanApiAction["AccountTokentx"] = "account_tokentx";
    EtherscanApiAction["AccountGetminedblocks"] = "account_getminedblocks";
    EtherscanApiAction["ContractGetAbi"] = "contract_getabi";
    EtherscanApiAction["TransactionGetstatus"] = "transaction_getstatus";
    EtherscanApiAction["TransactionGettxreceiptstatus"] = "transaction_gettxreceiptstatus";
    EtherscanApiAction["BlockGetblockreward"] = "block_getblockreward";
    EtherscanApiAction["LogsGetLogs"] = "logs_getLogs";
    EtherscanApiAction["StatsEthsupply"] = "stats_ethsupply";
    EtherscanApiAction["StatsEthprice"] = "stats_ethprice";
})(EtherscanApiAction = exports.EtherscanApiAction || (exports.EtherscanApiAction = {}));
/**
 * This is the default export of the library, a client that can be constructed for interacting with the
 * Etherscan API.
 */
class EtherscanClient {
    constructor(apiUrl, opts = {}) {
        this.maxRequestsPerSecond = 5;
        this.lastRequestTime = null;
        this.apiUrl = apiUrl;
        this.apiKey = opts && opts.apiKey;
        this.maxRequestsPerSecond = opts.maxRequestsPerSecond || 5;
        this.debug = opts.debug;
    }
    getAbi(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const etherscanResponse = yield this.call(EtherscanApiAction.ContractGetAbi, {
                address,
            });
            // Etherscan gives us 'NOTOK' and '0' if the ABI is not found
            if (!etherscanResponse ||
                (etherscanResponse.message === "NOTOK" &&
                    etherscanResponse.status === "0" &&
                    etherscanResponse.result === "")) {
                return null;
            }
            let abi;
            try {
                abi = JSON.parse(etherscanResponse.result);
            }
            catch (err) {
                throw new Error(`failed to parse the ABI json for address ${address}: ${err.message}`);
            }
            return abi;
        });
    }
    call(actionEnum, params = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            // await this.throttle();
            try {
                const [module, action] = actionEnum.split("_");
                const fullApi = `${this.apiUrl}?${(0, qs_1.stringify)(Object.assign(Object.assign({}, params), { action, apikey: this.apiKey, module }))}`;
                this.debug && console.debug(`request api debugï¼š`, fullApi);
                // const response = await axios.get(fullApi, {
                //   timeout: 1000 * 20,
                // });
                const response = yield (0, cross_fetch_1.default)(fullApi);
                // 403 responses are not usually expected
                if (response.status !== 200) {
                    throw new Error(`response status was not 200: ${response.status}`);
                }
                const responseJson = yield response.json();
                this.debug &&
                    console.debug(`request api debug response: ${response.status}`, responseJson);
                if (responseJson.message.includes("transactions found") ||
                    responseJson.message.includes("No token transfers found")) {
                    responseJson.status = "1";
                    responseJson.result = [];
                }
                return responseJson;
            }
            catch (error) {
                console.error("etherscan api request:", error.message);
                return {
                    message: "NOTOK",
                    result: error.message,
                    status: "0",
                };
            }
        });
    }
    throttle() {
        return __awaiter(this, void 0, void 0, function* () {
            const now = Date.now();
            if (this.lastRequestTime === null) {
                this.lastRequestTime = now;
                return;
            }
            const sleepMs = 1000 / this.maxRequestsPerSecond;
            const executionTime = this.lastRequestTime + sleepMs;
            if (executionTime <= now) {
                this.lastRequestTime = now;
                return;
            }
            this.lastRequestTime = executionTime;
            return new Promise(resolve => {
                setTimeout(() => resolve(), executionTime - now);
            });
        });
    }
}
exports.default = EtherscanClient;
