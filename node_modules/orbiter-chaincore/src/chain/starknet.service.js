"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Starknet = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const starknet = __importStar(require("starknet"));
const Starknet_Token_json_1 = __importDefault(require("../abi/Starknet_Token.json"));
const core_1 = require("../utils/core");
class Starknet {
    constructor(chainConfig) {
        this.chainConfig = chainConfig;
        this.provider = new starknet.Provider({
            network: this.chainConfig.networkId,
        });
    }
    getTokenInfo(idOrAddrsss) {
        return __awaiter(this, void 0, void 0, function* () {
            if (idOrAddrsss === 0 ||
                idOrAddrsss === "0" ||
                idOrAddrsss === "0x0000000000000000000000000000000000000000") {
                return this.chainConfig.nativeCurrency;
            }
            const localToken = this.chainConfig.tokens.find(t => (0, core_1.equals)(t.address, String(idOrAddrsss)));
            if (localToken) {
                return localToken;
            }
            return null;
        });
    }
    getLatestHeight() {
        return __awaiter(this, void 0, void 0, function* () {
            const block = yield this.provider.getBlock();
            return Number(block.block_number);
        });
    }
    getTransactionByHash(hash) {
        throw new Error("Method not implemented.");
    }
    getTransactions(address, filter) {
        throw new Error("Method not implemented.");
    }
    getTokenTransactions(address, contractAddress, filter) {
        throw new Error("Method not implemented.");
    }
    getBalance(address) {
        return this.getTokenBalance(address, this.chainConfig.nativeCurrency.address);
    }
    getBalances(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const result = [];
            yield Promise.all(this.chainConfig.tokens.map((row) => __awaiter(this, void 0, void 0, function* () {
                const item = yield this.getTokenBalance(address, row.address);
                result.push({
                    token: row.address,
                    balance: item.toString(),
                });
            })));
            return result;
        });
    }
    getDecimals() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.chainConfig.nativeCurrency.decimals;
        });
    }
    getTokenBalance(address, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getTokenInfo(tokenAddress);
            if (!token) {
                throw new Error(`${tokenAddress} Token Not Exists`);
            }
            const contractInstance = new starknet.Contract(Starknet_Token_json_1.default, tokenAddress, this.provider);
            const balanceResult = (yield contractInstance.balanceOf(address))
                .balance;
            return new bignumber_js_1.default(balanceResult.low.toString());
        });
    }
    getTokenDecimals(tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getTokenInfo(tokenAddress);
            if (!token) {
                throw new Error(`${tokenAddress} Token Not Exists`);
            }
            if (token) {
                return Number(token.decimals);
            }
            return 0;
        });
    }
    getTokenSymbol(tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getTokenInfo(tokenAddress);
            if (!token) {
                throw new Error(`${tokenAddress} Token Not Exists`);
            }
            return token && token.symbol;
        });
    }
}
exports.Starknet = Starknet;
