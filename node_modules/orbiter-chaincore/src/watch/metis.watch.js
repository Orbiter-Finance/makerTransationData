"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetisWatch = void 0;
const evm_watch_1 = __importDefault(require("./evm.watch"));
class MetisWatch extends evm_watch_1.default {
    constructor() {
        super(...arguments);
        this.minConfirmations = 3;
    }
    getApiFilter(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const params = {
                address,
                sort: "asc",
                page: 1,
                offset: 0,
            };
            const cursor = yield this.apiScanCursor(address);
            if (cursor) {
                params.startblock = Number(cursor.blockNumber);
            }
            return params;
        });
    }
    apiWatchNewTransaction(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = yield this.getApiFilter(address);
            const response = yield this.chain.getTokenTransactions(address, null, filter);
            return response.txlist;
        });
    }
}
exports.MetisWatch = MetisWatch;
