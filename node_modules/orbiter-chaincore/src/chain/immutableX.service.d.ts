import BigNumber from "bignumber.js";
import { HashOrBlockNumber, IChain, IChainConfig, QueryTxFilterIMX, QueryTransactionsResponse, Transaction, Token, TokeBalanceResponse } from "../types";
import { ImmutableXClient } from "@imtbl/imx-sdk";
/**
 * https://immutascan.io/
 * https://docs.x.immutable.com/docs/welcome
 */
export declare class ImmutableX implements IChain {
    readonly chainConfig: IChainConfig;
    private tokens;
    private client;
    constructor(chainConfig: IChainConfig);
    getLatestHeight(): Promise<number>;
    createClient(): Promise<ImmutableXClient>;
    getTokenList(): Promise<Token[]>;
    getTokenInfo(idOrAddrsss: string | number): Promise<Token | undefined>;
    getConfirmations(_hashOrHeight: HashOrBlockNumber): Promise<number>;
    calcConfirmations(_targetHeight: number, _latestHeight: number): Promise<number>;
    getTransactionByHash(hash: string): Promise<Transaction | null>;
    static timestampToNonce(timestamp: number | string): number;
    convertTxToEntity(data: any): Promise<Transaction | null>;
    getTransactions(address: string, filter?: Partial<QueryTxFilterIMX>): Promise<QueryTransactionsResponse>;
    getTokenTransactions(_address: string, _tokenAddress: string, _filter: Partial<QueryTxFilterIMX>): Promise<QueryTransactionsResponse>;
    getBalance(address: string): Promise<BigNumber>;
    getBalances(address: string): Promise<TokeBalanceResponse[]>;
    getDecimals(): Promise<number>;
    getTokenBalance(address: string, tokenAddress: string): Promise<BigNumber>;
    getTokenDecimals(tokenAddress: string): Promise<number>;
    getTokenSymbol(tokenAddress: string): Promise<string>;
}
