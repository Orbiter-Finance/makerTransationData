"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoggerService = void 0;
const winston_1 = require("winston");
require("winston-daily-rotate-file");
const { label } = winston_1.format;
const LOGGER_LEVEL = {
    error: 0,
    warn: 1,
    info: 2,
    http: 3,
    verbose: 4,
    debug: 5,
    silly: 6,
};
require("winston-daily-rotate-file"); // Add DailyRotateFile to Winston transports
const core_1 = require("./core");
class LoggerService {
    static createLogger(options = {}) {
        const config = Object.assign({
            key: "",
            dir: `runtime/logs`,
            label: "",
            datePattern: "YYYY-MM-DD",
            zippedArchive: true,
            maxSize: "20m",
            maxFiles: "10d",
        }, options);
        //
        const customFormat = winston_1.format.printf(options => {
            const { level, label, timestamp, message } = options, meta = __rest(options, ["level", "label", "timestamp", "message"]);
            const metaStr = !(0, core_1.isEmpty)(meta) ? JSON.stringify(meta) : "";
            return `${timestamp} [${level.toUpperCase()}] ${label} ${message} ${metaStr}`;
        });
        const consoleTransport = new winston_1.transports.Console({
            format: winston_1.format.combine(winston_1.format.timestamp({ format: "YYYY/MM/DD HH:mm:ss" }), label({ label: config.label }), 
            // format.prettyPrint(),
            customFormat),
        });
        const errorFileTransport = new winston_1.transports.DailyRotateFile({
            filename: `${config.dir}/${(0, core_1.isEmpty)(config.key) ? "" : config.key + "-"}error-%DATE%.log`,
            datePattern: config.datePattern,
            zippedArchive: config.zippedArchive,
            maxSize: config.maxSize,
            maxFiles: config.maxFiles,
            level: "error",
            format: winston_1.format.combine(winston_1.format.timestamp({ format: "YYYY/MM/DD HH:mm:ss" }), winston_1.format.splat(), label({ label: config.label }), customFormat),
        });
        const infoFileTransport = new winston_1.transports.DailyRotateFile({
            filename: `${config.dir}/${(0, core_1.isEmpty)(config.key) ? "" : config.key + "-"}info-%DATE%.log`,
            datePattern: config.datePattern,
            zippedArchive: config.zippedArchive,
            maxSize: config.maxSize,
            maxFiles: config.maxFiles,
            level: "info",
            format: winston_1.format.combine(winston_1.format.timestamp({ format: "YYYY/MM/DD HH:mm:ss" }), winston_1.format.splat(), label({ label: config.label }), customFormat),
        });
        const loggerService = (0, winston_1.createLogger)({
            exitOnError: false,
            levels: LOGGER_LEVEL,
            format: winston_1.format.simple(),
            transports: [consoleTransport, errorFileTransport, infoFileTransport],
        });
        LoggerService.services[config.key] = loggerService;
        return loggerService;
    }
    static getLogger(key, options = {}) {
        return (LoggerService.services[key] ||
            LoggerService.createLogger(Object.assign(options, { key })));
    }
}
exports.LoggerService = LoggerService;
LoggerService.services = {};
exports.default = LoggerService.getLogger("");
