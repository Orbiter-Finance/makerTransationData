"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Optimism = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const evm_explorer_service_1 = require("./evm-explorer.service");
class Optimism extends evm_explorer_service_1.EvmExplorerService {
    convertTxToEntity(trx) {
        const _super = Object.create(null, {
            convertTxToEntity: { get: () => super.convertTxToEntity }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const txData = yield _super.convertTxToEntity.call(this, trx);
            if (txData) {
                const trxReceipt = txData.receipt;
                if (trxReceipt &&
                    trxReceipt["l1GasUsed"] &&
                    trxReceipt["l1GasPrice"] &&
                    trxReceipt["l1FeeScalar"]) {
                    // const gasUsed = trxReceipt.gasUsed;
                    txData.gas = Number(trxReceipt["l1GasUsed"]);
                    txData.gasPrice = Number(trxReceipt["l1GasPrice"]);
                    const fee = Number(trxReceipt["l1Fee"]);
                    // const fee =
                    //   Number(gasUsed) * Number(txData.gasPrice) +
                    //   Number(trxReceipt["l1GasUsed"]) *
                    //     Number(trxReceipt["l1GasPrice"]) *
                    //     Number(trxReceipt["l1FeeScalar"]);
                    txData.fee = new bignumber_js_1.default(fee).toString();
                }
            }
            return txData;
        });
    }
}
exports.Optimism = Optimism;
