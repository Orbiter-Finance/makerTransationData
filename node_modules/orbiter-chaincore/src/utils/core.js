"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uniq = exports.flatten = exports.padStart = exports.uniqBy = exports.maxBy = exports.orderBy = exports.groupBy = exports.isEmpty = exports.isBoolean = exports.isNumber = exports.isNumberString = exports.isFunction = exports.isString = exports.isObject = exports.fix0xPadStartAddress = exports.oldMarketConvertScanChainConfig = exports.equals = exports.sleep = void 0;
const lodash_1 = require("lodash");
function sleep(ms) {
    return __awaiter(this, void 0, void 0, function* () {
        return new Promise(resolve => {
            setTimeout(() => {
                resolve(null);
            }, ms);
        });
    });
}
exports.sleep = sleep;
function equals(val1, val2, ignoreCase = true) {
    if (val1 === val2) {
        return true;
    }
    if (ignoreCase && String(val1).toLowerCase() === String(val2).toLowerCase()) {
        return true;
    }
    return false;
}
exports.equals = equals;
function oldMarketConvertScanChainConfig(makerList) {
    const c1List = (0, lodash_1.uniqBy)(makerList, (row) => {
        return row.c1ID + row.makerAddress;
    }).map((row) => {
        return {
            intranetId: row.c1ID,
            address: row.makerAddress,
        };
    });
    const c2List = (0, lodash_1.uniqBy)(makerList, (row) => {
        return row.c2ID + row.makerAddress;
    }).map((row) => {
        return {
            intranetId: row.c2ID,
            address: row.makerAddress,
        };
    });
    const result = (0, lodash_1.uniqBy)([...c1List, ...c2List], (row) => {
        return row.intranetId + row.address;
    });
    return (0, lodash_1.groupBy)(result, "intranetId");
}
exports.oldMarketConvertScanChainConfig = oldMarketConvertScanChainConfig;
function fix0xPadStartAddress(address, length) {
    address = address.replace("0x", "");
    if (address.length < length) {
        return `0x${(0, lodash_1.padStart)(address, length - 2, "0")}`;
    }
    return address;
}
exports.fix0xPadStartAddress = fix0xPadStartAddress;
function isObject(obj) {
    if (Buffer.isBuffer(obj)) {
        return false;
    }
    return toString.call(obj) === "[object Object]";
}
exports.isObject = isObject;
function isString(obj) {
    return toString.call(obj) === "[object String]";
}
exports.isString = isString;
function isFunction(obj) {
    return typeof obj === "function";
}
exports.isFunction = isFunction;
const numberReg = /^((\-?\d*\.?\d*(?:e[+-]?\d*(?:\d?\.?|\.?\d?)\d*)?)|(0[0-7]+)|(0x[0-9a-f]+))$/i;
function isNumberString(obj) {
    return numberReg.test(obj);
}
exports.isNumberString = isNumberString;
function isNumber(obj) {
    return toString.call(obj) === "[object Number]";
}
exports.isNumber = isNumber;
function isBoolean(obj) {
    return toString.call(obj) === "[object Boolean]";
}
exports.isBoolean = isBoolean;
function isEmpty(obj) {
    if (isObject(obj)) {
        let key;
        for (key in obj) {
            return false;
        }
        return true;
    }
    else if (Array.isArray(obj)) {
        return obj.length === 0;
    }
    else if (isString(obj)) {
        return obj.length === 0;
    }
    else if (isNumber(obj)) {
        return obj === 0;
    }
    else if (obj === null || obj === undefined) {
        return true;
    }
    else if (isBoolean(obj)) {
        return !obj;
    }
    return false;
}
exports.isEmpty = isEmpty;
var lodash_2 = require("lodash");
Object.defineProperty(exports, "groupBy", { enumerable: true, get: function () { return lodash_2.groupBy; } });
Object.defineProperty(exports, "orderBy", { enumerable: true, get: function () { return lodash_2.orderBy; } });
Object.defineProperty(exports, "maxBy", { enumerable: true, get: function () { return lodash_2.maxBy; } });
Object.defineProperty(exports, "uniqBy", { enumerable: true, get: function () { return lodash_2.uniqBy; } });
Object.defineProperty(exports, "padStart", { enumerable: true, get: function () { return lodash_2.padStart; } });
Object.defineProperty(exports, "flatten", { enumerable: true, get: function () { return lodash_2.flatten; } });
Object.defineProperty(exports, "uniq", { enumerable: true, get: function () { return lodash_2.uniq; } });
