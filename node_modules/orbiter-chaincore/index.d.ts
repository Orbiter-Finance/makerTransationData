import { IChainConfig, IChainWatch } from "./src/types";
import logger from "./src/utils/logger";
import * as utils from "./src/utils";
import * as chainService from "./src/chain";
import * as chainWatch from "./src/watch";
import "cross-fetch/polyfill";
export interface IScanChainItem {
    address: string;
    intranetId: string;
    chainId: string;
}
export interface IOption {
    logging?: boolean;
    cacheDir?: string;
}
declare class ScanChainMain {
    private static taskChain;
    constructor(configs: Array<IChainConfig>, _option?: IOption);
    startScanChain(intranetId: string, addressList?: Array<string>): Promise<IChainWatch | null>;
    static reStartTask(intranetId: string): boolean;
    resume(intranetId?: string, _callback?: Function): Promise<void>;
    pause(intranetId?: string, _callback?: Function): Promise<void>;
}
export { ScanChainMain, utils, logger, chainService, chainWatch };
export declare const chains: typeof utils.chains;
export declare const pubSub: import("./src/utils/pubsub").PubSub;
