"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArbitrumNova = void 0;
const bignumber_js_1 = require("bignumber.js");
const evm_explorer_service_1 = require("./evm-explorer.service");
/**
 * https://goerli-rollup-explorer.arbitrum.io/
 * https://nova-explorer.arbitrum.io/
 * https://arbiscan.io/
 */
class ArbitrumNova extends evm_explorer_service_1.EvmExplorerService {
    convertTxToEntity(trx) {
        const _super = Object.create(null, {
            convertTxToEntity: { get: () => super.convertTxToEntity }
        });
        return __awaiter(this, void 0, void 0, function* () {
            const txData = yield _super.convertTxToEntity.call(this, trx);
            if (txData && txData.receipt) {
                txData.gas = txData.receipt["cumulativeGasUsed"] || 0;
                txData.gasPrice = txData.receipt["effectiveGasPrice"] || 0;
                txData.fee = new bignumber_js_1.BigNumber(txData.gas || 0)
                    .multipliedBy(txData.gasPrice || 0)
                    .toString();
            }
            return txData;
        });
    }
}
exports.ArbitrumNova = ArbitrumNova;
