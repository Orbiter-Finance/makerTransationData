"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeyvFile = exports.makeField = exports.defaultOpts = void 0;
const os = __importStar(require("os"));
const fs = __importStar(require("fs-extra"));
/* eslint-disable */
function isNumber(val) {
    return typeof val === "number";
}
exports.defaultOpts = {
    filename: `${os.tmpdir()}/keyv-file/default-rnd-${Math.random()
        .toString(36)
        .slice(2)}.json`,
    expiredCheckDelay: 24 * 3600 * 1000,
    writeDelay: 100,
    encode: JSON.stringify,
    decode: JSON.parse,
};
function makeField(kv, key, defaults) {
    return {
        get(def = defaults) {
            return kv.get(key, def);
        },
        set(val) {
            return kv.set(key, val);
        },
        delete() {
            return kv.delete(key);
        },
    };
}
exports.makeField = makeField;
class KeyvFile {
    constructor(opts) {
        this.ttlSupport = true;
        this._opts = exports.defaultOpts;
        this._opts = Object.assign(Object.assign({}, this._opts), opts);
        try {
            const data = this._opts.decode(fs.readFileSync(this._opts.filename, "utf8"));
            if (!Array.isArray(data.cache)) {
                const _cache = data.cache;
                data.cache = [];
                for (const key in _cache) {
                    data.cache.push([key, _cache[key]]);
                }
            }
            this._cache = new Map(data.cache);
            this._lastExpire = data.lastExpire;
        }
        catch (e) {
            this._cache = new Map();
            this._lastExpire = Date.now();
        }
    }
    isExpired(data) {
        return isNumber(data.expire) && data.expire <= Date.now();
    }
    get(key, defaults) {
        try {
            const data = this._cache.get(key);
            if (!data) {
                return defaults;
            }
            else if (this.isExpired(data)) {
                this.delete(key);
                return defaults;
            }
            else {
                return data.value;
            }
        }
        catch (error) {
            console.error(error);
        }
    }
    has(key) {
        return typeof this.get(key) !== "undefined";
    }
    keys() {
        const keys = [];
        for (const key of this._cache.keys()) {
            if (!this.isExpired(this._cache.get(key))) {
                keys.push(key);
            }
        }
        return keys;
    }
    /**
     *
     * @param key
     * @param value
     * @param ttl time-to-live, seconds
     */
    set(key, value, ttl) {
        if (ttl === 0) {
            ttl = undefined;
        }
        this._cache.set(key, {
            value: value,
            expire: isNumber(ttl) ? Date.now() + ttl : undefined,
        });
        this.save();
    }
    delete(key) {
        const ret = this._cache.delete(key);
        this.save();
        return ret;
    }
    clear() {
        this._cache = new Map();
        this._lastExpire = Date.now();
        this.save();
    }
    clearExpire() {
        const now = Date.now();
        if (now - this._lastExpire <= this._opts.expiredCheckDelay) {
            return;
        }
        for (const key of this._cache.keys()) {
            const data = this._cache.get(key);
            if (this.isExpired(data)) {
                this._cache.delete(key);
            }
        }
        this._lastExpire = now;
    }
    saveToDisk() {
        const cache = [];
        for (const [key, val] of this._cache) {
            cache.push([key, val]);
        }
        const data = this._opts.encode({
            cache,
            lastExpire: this._lastExpire,
        });
        return new Promise((resolve, reject) => {
            fs.outputFile(this._opts.filename, data, err => {
                if (err) {
                    reject(err);
                }
                else {
                    resolve();
                }
            });
        });
    }
    save() {
        this.clearExpire();
        if (this._savePromise) {
            return this._savePromise;
        }
        this._savePromise = new Promise((resolve, reject) => {
            this._saveTimer = setTimeout(() => {
                this.saveToDisk()
                    .then(resolve, reject)
                    .then(() => {
                    this._savePromise = void 0;
                });
            }, this._opts.writeDelay);
        });
        return this._savePromise;
    }
}
exports.KeyvFile = KeyvFile;
exports.default = KeyvFile;
