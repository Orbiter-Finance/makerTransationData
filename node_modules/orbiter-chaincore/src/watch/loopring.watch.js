"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LoopringWatch = void 0;
const dayjs_1 = __importDefault(require("dayjs"));
const base_watch_1 = __importDefault(require("./base.watch"));
class LoopringWatch extends base_watch_1.default {
    constructor() {
        super(...arguments);
        this.minConfirmations = 1;
    }
    getApiFilter(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = {
                start: Date.now(),
                status: "processed,received",
                limit: 100,
                // tokenSymbol: 'ETH',
                transferTypes: "transfer",
                end: 9999999999999,
            };
            const cursor = yield this.apiScanCursor(address);
            if (cursor && cursor.timestamp) {
                filter.start = (0, dayjs_1.default)(Number(cursor.timestamp) * 1000)
                    .add(1, "second")
                    .valueOf();
            }
            filter.end = (0, dayjs_1.default)(filter.start).add(30, "minute").valueOf();
            return filter;
        });
    }
    apiWatchNewTransaction(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const filter = yield this.getApiFilter(address);
            const response = yield this.chain.getTransactions(address, filter);
            if (!response.txlist || response.txlist.length <= 0) {
                if ((0, dayjs_1.default)(filter.end).valueOf() < Date.now()) {
                    yield this.apiScanCursor(address, {
                        timestamp: Number(filter.end) / 1000,
                        hash: "",
                        blockNumber: 0,
                    });
                }
            }
            return response.txlist;
        });
    }
    replayBlock(_start, _end, _changeBlock) {
        throw new Error("Method not implemented.");
    }
}
exports.LoopringWatch = LoopringWatch;
