import { Address, ITransaction, QueryTxFilterZKSpace, replayBlockCallback } from "../types";
import AbstractWatch from "./base.watch";
/**
# ZKSpace

* type
 * zkRollup
 
* Tokens are supported (service charges can also be set)
 * ETH、ZKS、WBTC 和 USDT
 * **Gas fee:**Each Swap transaction needs to pay $1 equivalent Gas fee, which is used to amortize the cost of aggregating and packaging the results of multiple transactions on the platform and putting data on ETH blockchain.

* Official website
 *  [zks.org](https://zks.org/)

* Wallet (officially and test a domain name according to the link network)
 * [ZKSpace - Layer-2 for All](https://zks.app/wallet/token)

* github
 * [L2Labs · GitHub](https://github.com/l2labs)

* docs
 * [RESTful API - ZKSpace Wiki (English)](https://en.wiki.zks.org/interact-with-zkswap/restful-api)

* Block browser
 * mainnet [zkswap.info](https://zkswap.info/)
 * rinkeby： [ZKSpace Explorer](https://v3-rinkeby.zkswap.info/)
 */
export declare class ZKSpaceWatch extends AbstractWatch {
    minConfirmations: number;
    getApiFilter(address: Address): Promise<QueryTxFilterZKSpace>;
    apiScanBetween(address: string, startTime: number, endTime: number): Promise<import("../types").Transaction[]>;
    apiWatchNewTransaction(address: Address): Promise<Array<ITransaction>>;
    replayBlock(_start: number, _end: number, _changeBlock?: replayBlockCallback): Promise<{
        start: number;
        end: number;
    }>;
}
