import { HashOrBlockNumber, IChain, IChainConfig, ITransaction, QueryTransactionsResponse, QueryTxFilterDydx, TokeBalanceResponse, Transaction } from "../types";
import BigNumber from "bignumber.js";
import { DydxClient } from "@dydxprotocol/v3-client";
export declare class Dydx implements IChain {
    readonly chainConfig: IChainConfig;
    private apiKeyCredentials;
    constructor(chainConfig: IChainConfig);
    getTokenInfo(idOrAddrsss: string | number): Promise<import("../types").Token | null>;
    getDydxClient(): DydxClient;
    getLatestHeight(): Promise<number>;
    convertTxToEntity(data: any): Promise<Transaction | null>;
    getConfirmations(_hashOrHeight: HashOrBlockNumber): Promise<number>;
    calcConfirmations(_targetHeight: number, _latestHeight: number): Promise<number>;
    getTransactionByHash(_hash: string): Promise<ITransaction>;
    /**
     * The api does not return the nonce value, timestamp(ms) last three number is the nonce
     *  (warnning: there is a possibility of conflict)
     * @param  timestamp ms
     * @returns
     */
    static timestampToNonce(timestamp: number | string): string;
    getTransactions(_address: string, filter?: Partial<QueryTxFilterDydx>): Promise<QueryTransactionsResponse>;
    getTokenTransactions(address: string, tokenAddress: string, filter: Partial<QueryTxFilterDydx>): Promise<QueryTransactionsResponse>;
    getBalance(address: string): Promise<BigNumber>;
    getBalances(_address: string): Promise<TokeBalanceResponse[]>;
    getDecimals(): Promise<number>;
    getTokenBalance(address: string, tokenAddress: string): Promise<BigNumber>;
    getTokenDecimals(tokenAddress: string): Promise<number>;
    getTokenSymbol(tokenAddress: string): Promise<string>;
}
