import { Address, IChain, IChainWatch, ITransaction, QueryTxFilter, replayBlockCallback, Transaction } from "../types";
import Keyv from "keyv";
import { Logger } from "winston";
export default abstract class BaseWatch implements IChainWatch {
    readonly chain: IChain;
    protected watchAddress: Map<Address, any>;
    protected pushHistory: Map<string, boolean>;
    protected cache: Keyv;
    protected logger: Logger;
    private rpcLastBlockHeight;
    set setRpcLastBlockHeight(height: number);
    abstract readonly minConfirmations: number;
    constructor(chain: IChain);
    isWatchWalletAddress(address: string): Promise<boolean>;
    isWatchContractAddress(address: string): Promise<boolean>;
    isWatchXVMContractAddress(address: string): Promise<boolean>;
    isWatchTokenAddress(address: string): Promise<boolean>;
    abstract getApiFilter(address: Address): Promise<QueryTxFilter>;
    init(): Promise<this>;
    addWatchAddress(address: Array<Address> | Address): this;
    protected pushMessage(address: Address, txList: Array<ITransaction>): Promise<ITransaction[]>;
    protected pushBefore(address: Address, txList: Array<ITransaction>): Promise<{
        address: string;
        txList: Transaction[];
    }>;
    protected pushAfter(address: Address, txList: Array<ITransaction>): {
        address: string;
        txList: Transaction[];
    };
    apiWatchNewTransaction(address: Address): Promise<Array<ITransaction>>;
    apiScanCursor(address: Address, trx?: Partial<ITransaction>): Promise<Partial<ITransaction> | null>;
    apiScan(): Promise<any>;
    private updateScanStatus;
    abstract replayBlock(start: number, end: number, changeBlock?: replayBlockCallback): Promise<{
        start: number;
        end: number;
    }>;
    rpcScan(): Promise<{
        start: number;
        end: number;
    }>;
}
