import { EvmExplorerService } from "../chain/evm-explorer.service";
import { Address, AddressMapTransactions, ITransaction, QueryTxFilterEther, replayBlockCallback } from "../types";
import BaseWatch from "./base.watch";
import { Alchemy, Network } from "alchemy-sdk";
export default abstract class EVMWatchAlchemyBase extends BaseWatch {
    readonly chain: EvmExplorerService;
    minConfirmations: number;
    alchemy: Alchemy;
    constructor(chain: EvmExplorerService, network: Network);
    getApiFilter(address: Address): Promise<QueryTxFilterEther>;
    apiWatchNewTransaction(address: Address): Promise<Array<ITransaction>>;
    replayBlockTransaction(hashOrTx: string | any): Promise<AddressMapTransactions>;
    replayBlock(start: number, end: number, changeBlock?: replayBlockCallback): Promise<{
        start: number;
        end: number;
    }>;
}
