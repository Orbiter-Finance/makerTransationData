"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = require("./../utils/logger");
const pubsub_1 = __importDefault(require("../utils/pubsub"));
const core_1 = require("../utils/core");
const keyv_1 = __importDefault(require("keyv"));
const dayjs_1 = __importDefault(require("dayjs"));
const intervalTimer_decorator_1 = require("../decorators/intervalTimer.decorator");
const keyvFile_1 = __importDefault(require("../utils/keyvFile"));
class BaseWatch {
    constructor(chain) {
        this.chain = chain;
        this.watchAddress = new Map();
        this.pushHistory = new Map();
        this.rpcLastBlockHeight = 0;
        this.logger = logger_1.LoggerService.getLogger(chain.chainConfig.internalId, {
            label: chain.chainConfig.name,
            dir: `${process.env.RUNTIME_DIR || "runtime"}/logs/${chain.chainConfig.internalId}`,
        });
        this.cache = new keyv_1.default({
            store: new keyvFile_1.default({
                filename: `${process.env.RUNTIME_DIR || "runtime"}/cache/${chain.chainConfig.internalId}`,
                expiredCheckDelay: 999999 * 24 * 3600 * 1000,
                writeDelay: 100,
                encode: JSON.stringify,
                decode: JSON.parse, // deserialize function
            }),
        });
    }
    set setRpcLastBlockHeight(height) {
        if (height > this.rpcLastBlockHeight) {
            this.rpcLastBlockHeight = height;
            this.cache
                .set(`rpcScan:${this.chain.chainConfig.chainId}`, height)
                .catch(error => {
                this.logger.error("setRpcLastBlockHeight error", error);
            });
        }
    }
    isWatchWalletAddress(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.watchAddress.has(address.toLowerCase());
        });
    }
    isWatchContractAddress(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const isWatchContract = this.chain.chainConfig.contracts.findIndex(addr => (0, core_1.equals)(addr, address)) != -1;
            return isWatchContract;
        });
    }
    isWatchXVMContractAddress(address) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            if (!((_a = this.chain.chainConfig) === null || _a === void 0 ? void 0 : _a.xvmList))
                return false;
            const isWatchXVMContract = this.chain.chainConfig.xvmList.findIndex(addr => (0, core_1.equals)(addr, address.toLowerCase())) != -1;
            return isWatchXVMContract;
        });
    }
    isWatchTokenAddress(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const chainConfig = this.chain.chainConfig;
            const isChainMainCoin = (0, core_1.equals)(chainConfig.nativeCurrency.address, address);
            if (isChainMainCoin)
                return true;
            const isWatchToken = chainConfig.tokens.findIndex(token => (0, core_1.equals)(token.address, address)) !=
                -1;
            return isWatchToken;
        });
    }
    init() {
        return __awaiter(this, void 0, void 0, function* () {
            // let txlist: Array<string> = (await this.cache.get(`txlist`)) || []
            // if (txlist.length >= 1000) {
            //   txlist.splice(1000)
            // }
            // if (!Array.isArray(txlist)) txlist = []
            // txlist.forEach((hash) => {
            //   if (!this.pushHistory.has(hash.toLowerCase())) {
            //     this.pushHistory.set(hash, {
            //       status: true,
            //       time: 0,
            //     })
            //   }
            // })
            return this;
        });
    }
    addWatchAddress(address) {
        if (Array.isArray(address)) {
            for (const addr of address) {
                const addrLower = addr.toLowerCase();
                if (!this.watchAddress.has(addrLower) && !(0, core_1.isEmpty)(addrLower)) {
                    this.watchAddress.set(addrLower, []);
                }
            }
        }
        else if (typeof address === "string") {
            const addrLower = address.toLowerCase();
            if (!this.watchAddress.has(addrLower) && !(0, core_1.isEmpty)(addrLower)) {
                this.watchAddress.set(addrLower, []);
            }
        }
        else {
            throw new Error("Failed to identify parameter");
        }
        return this;
    }
    pushMessage(address, txList) {
        return __awaiter(this, void 0, void 0, function* () {
            let pushTrx = [];
            ({ txList } = yield this.pushBefore(address, txList));
            // txList = txList.filter(tx => tx.value.gt(0));
            if (this.pushHistory.size > 1000)
                this.pushHistory.clear();
            txList.forEach(tx => {
                const key = `${tx.hash.toLowerCase()}:${tx.status}`;
                if (!this.pushHistory.has(key)) {
                    pushTrx.push(tx);
                    this.pushHistory.set(key, true);
                }
            });
            if (pushTrx.length > 0) {
                // write addrTxMap to cache
                this.logger.info(`New Transaction Pushed`, pushTrx);
                pushTrx = (0, core_1.orderBy)(pushTrx, ["timestamp", "blockNumber"], ["desc", "desc"]);
                pubsub_1.default.publish(`${this.chain.chainConfig.internalId}:txlist`, pushTrx);
                this.pushAfter(address, pushTrx);
            }
            return pushTrx;
        });
    }
    pushBefore(address, txList) {
        return __awaiter(this, void 0, void 0, function* () {
            return { address, txList };
        });
    }
    pushAfter(address, txList) {
        return { address, txList };
    }
    apiWatchNewTransaction(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const trxList = [];
            const filter = yield this.getApiFilter(address);
            try {
                const response = yield this.chain.getTokenTransactions(address, null, filter);
                trxList.push(...response.txlist);
            }
            catch (error) {
                this.logger.error(`apiWatchNewTransaction getTokenTransactions error: `, error);
            }
            try {
                const response = yield this.chain.getTransactions(address, filter);
                trxList.push(...response.txlist);
            }
            catch (error) {
                this.logger.error(`apiWatchNewTransaction getTransactions error: `, error);
            }
            return trxList.filter(tx => tx.value.gt(0));
        });
    }
    apiScanCursor(address, trx) {
        return __awaiter(this, void 0, void 0, function* () {
            const cursorKey = `ApiCursor:${address}`;
            const cursorTx = yield this.cache.get(cursorKey);
            if (trx) {
                if (cursorTx) {
                    if (trx.blockNumber &&
                        cursorTx.blockNumber &&
                        cursorTx.blockNumber > trx.blockNumber) {
                        return cursorTx;
                    }
                    if (trx.timestamp &&
                        cursorTx.timestamp &&
                        cursorTx.blockNumber > trx.timestamp) {
                        return cursorTx;
                    }
                }
                this.cache
                    .set(cursorKey, {
                    blockNumber: trx.blockNumber,
                    hash: trx.hash,
                    timestamp: trx.timestamp,
                })
                    .catch(error => {
                    this.logger.error("apiScanCursor save cache error:", error);
                });
                return trx;
            }
            else {
                // get cursor
                if (!(0, core_1.isEmpty)(cursorTx)) {
                    return cursorTx;
                }
                //
                let blockNumber = 1;
                try {
                    blockNumber = yield this.chain.getLatestHeight();
                }
                catch (error) {
                    this.logger.error(`init apiScanCursor get LastHeight error:`, error);
                }
                // TAG:blockNumber Whether + 1 is needed needs to be considered
                const nowTx = {
                    blockNumber: blockNumber,
                    hash: "",
                    timestamp: (0, dayjs_1.default)().unix(),
                };
                this.cache.set(cursorKey, nowTx).catch(error => {
                    this.logger.error("apiScanCursor save cache error:", error);
                });
                return nowTx;
            }
        });
    }
    apiScan() {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                if (this.watchAddress.size <= 0) {
                    this.logger.error(`Api Scan Missing address parameter`);
                    return true;
                }
                for (const address of this.watchAddress.keys()) {
                    try {
                        const prevCursor = yield this.apiScanCursor(address);
                        if (prevCursor) {
                            // exec query trx
                            this.chain.chainConfig.debug &&
                                this.logger.info(`API Query Transaction in Progress : makerAddress=${address},blockNumber=${prevCursor.blockNumber},timestamp=${prevCursor.timestamp}`);
                            const txList = yield this.apiWatchNewTransaction(address);
                            this.updateScanStatus("apiScan");
                            yield this.pushMessage(address, txList);
                            const latest = (0, core_1.orderBy)(txList, ["timestamp", "blockNumber"], ["desc", "desc"])[0];
                            yield this.apiScanCursor(address, latest);
                        }
                    }
                    catch (error) {
                        this.logger.error(`apiScan Error: address=${address}`, error);
                    }
                }
                return true;
            }
            catch (error) {
                this.logger.error(`apiScan Error: `, error);
            }
        });
    }
    updateScanStatus(methodsName) {
        if (intervalTimer_decorator_1.tasks.has(`${this.chain.chainConfig.internalId}:${methodsName}`)) {
            const taskInfo = intervalTimer_decorator_1.tasks.get(`${this.chain.chainConfig.internalId}:${methodsName}`);
            if (taskInfo) {
                taskInfo.lastTime = Date.now();
            }
        }
    }
    rpcScan() {
        return __awaiter(this, void 0, void 0, function* () {
            const currentBlockCacheKey = `rpcScan:${this.chain.chainConfig.chainId}`;
            const latestHeight = yield this.chain.getLatestHeight();
            if (!this.rpcLastBlockHeight || this.rpcLastBlockHeight <= 0) {
                // get cache height
                let cacheBlock = yield this.cache.get(currentBlockCacheKey);
                if (!cacheBlock) {
                    cacheBlock = latestHeight;
                }
                this.setRpcLastBlockHeight = cacheBlock;
            }
            const currentBlockHeight = this.rpcLastBlockHeight;
            if (latestHeight - currentBlockHeight + 1 > this.minConfirmations) {
                const result = yield this.replayBlock(currentBlockHeight + 1, latestHeight - this.minConfirmations, (blockNumber, txMap) => {
                    this.updateScanStatus("rpcScan");
                    if (blockNumber && blockNumber > this.rpcLastBlockHeight) {
                        this.setRpcLastBlockHeight = blockNumber;
                    }
                    if (txMap && txMap.size > 0) {
                        txMap.forEach((txlist, address) => {
                            if (txlist.length > 0) {
                                this.chain.chainConfig.debug &&
                                    this.logger.info(`RpcScan New Transaction: Cursor = ${blockNumber} `, txlist.map(tx => tx.hash));
                            }
                            this.pushMessage(address, txlist).catch(error => {
                                this.logger.error("rpcScan pushMessage error:", error);
                            });
                        });
                    }
                });
                this.chain.chainConfig.debug &&
                    this.logger.info(`rpcScan End of scan result：`, result);
                return result;
            }
            return {
                start: currentBlockHeight,
                end: latestHeight,
            };
        });
    }
}
__decorate([
    intervalTimer_decorator_1.IntervalTimerDecorator
], BaseWatch.prototype, "apiScan", null);
__decorate([
    intervalTimer_decorator_1.IntervalTimerDecorator
], BaseWatch.prototype, "rpcScan", null);
exports.default = BaseWatch;
