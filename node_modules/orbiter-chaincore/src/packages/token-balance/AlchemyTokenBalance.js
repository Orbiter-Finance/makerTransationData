"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AlchemyTokenBalance = void 0;
const alchemy_sdk_1 = require("alchemy-sdk");
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const ChainServiceTokenBalance_1 = require("./ChainServiceTokenBalance");
const AlchemyNetwork = {
    1: alchemy_sdk_1.Network.ETH_MAINNET,
    42161: alchemy_sdk_1.Network.ARB_MAINNET,
    137: alchemy_sdk_1.Network.MATIC_MAINNET,
    10: alchemy_sdk_1.Network.OPT_MAINNET,
};
class AlchemyTokenBalance extends ChainServiceTokenBalance_1.ChainServiceTokenBalance {
    constructor(chainId) {
        super(chainId);
        this.chainId = chainId;
        const reg = /(https|wss):\/\/.*\.com\/.*\//g;
        const apiKey = this.chainService.chainConfig.rpc[0].replace(reg, "");
        const config = {
            apiKey,
            network: AlchemyNetwork[Number(this.chainService.chainConfig.chainId)],
        };
        this.alchemy = new alchemy_sdk_1.Alchemy(config);
    }
    getHoldTokens(address) {
        return __awaiter(this, void 0, void 0, function* () {
            // The wallet address / token we want to query for:
            const ownerAddr = address;
            const holdTokensBalance = yield this.alchemy.core.getTokenBalances(ownerAddr);
            const token_balances = [];
            for (const item of holdTokensBalance.tokenBalances) {
                const decimals = yield this.chainService.getTokenDecimals(item.contractAddress);
                const symbol = yield this.chainService.getTokenSymbol(item.contractAddress);
                token_balances.push({
                    address: item.contractAddress,
                    symbol,
                    balance: new bignumber_js_1.default(item.tokenBalance).toString(),
                    decimals,
                });
            }
            return token_balances;
        });
    }
}
exports.AlchemyTokenBalance = AlchemyTokenBalance;
