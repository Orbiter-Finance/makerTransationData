"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZKSpace = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
const types_1 = require("../types");
const utils_1 = require("../utils");
/**
 * https://zks.app/wallet/token
 * https://zkspace.info/
 */
class ZKSpace {
    constructor(chainConfig) {
        this.chainConfig = chainConfig;
        this.tokens = [];
    }
    getLatestHeight() {
        return __awaiter(this, void 0, void 0, function* () {
            const { success, data } = yield utils_1.request.HttpGet(`${this.chainConfig.api.url}/blocks`, {
                start: 0,
                limit: 1,
            });
            if (success && Array.isArray(data.data) && data.data.length > 0) {
                return data.data[0].number;
            }
            return 0;
        });
    }
    getTokenList() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.tokens.length <= 0) {
                const { success, data } = yield utils_1.request.HttpGet(`${this.chainConfig.api.url}/tokens`);
                if (success && Array.isArray(data)) {
                    this.tokens = data.map(row => {
                        return {
                            id: row.id,
                            name: row.name,
                            symbol: row.symbol,
                            decimals: row.decimals,
                            address: row.address,
                        };
                    });
                    yield (0, fs_extra_1.outputJSONSync)(path_1.default.join(process.env.RUNTIME_DIR || "runtime", `token/${this.chainConfig.internalId}-tokens.json`), this.tokens);
                }
                return this.tokens;
            }
            return this.tokens;
        });
    }
    getTokenInfo(idOrAddrsss) {
        return __awaiter(this, void 0, void 0, function* () {
            if (idOrAddrsss === 0 ||
                idOrAddrsss === "0" ||
                idOrAddrsss === "0x0000000000000000000000000000000000000000") {
                return this.chainConfig.nativeCurrency;
            }
            const tokens = yield this.getTokenList();
            if (typeof idOrAddrsss === "string") {
                // check local config
                const localToken = this.chainConfig.tokens.find(t => utils_1.core.equals(t.address, idOrAddrsss));
                if (localToken) {
                    return localToken;
                }
                return tokens.find(token => utils_1.core.equals(token.address, idOrAddrsss));
            }
            else {
                return tokens.find(token => utils_1.core.equals(token.id, idOrAddrsss));
            }
        });
    }
    getConfirmations(hashOrHeight) {
        throw new Error("Method not implemented.");
    }
    calcConfirmations(targetHeight, latestHeight) {
        throw new Error("Method not implemented.");
    }
    convertTxToEntity(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!data)
                return data;
            const { tx_hash, nonce, block_number, from, to, amount, fee, token, created_at } = data, extra = __rest(data, ["tx_hash", "nonce", "block_number", "from", "to", "amount", "fee", "token", "created_at"]);
            let txStatus = types_1.TransactionStatus.Fail;
            if (extra.success) {
                txStatus = types_1.TransactionStatus.PENDING;
                if (extra.status === "pending") {
                    txStatus = types_1.TransactionStatus.PENDING;
                }
                else if (extra.status === "verified") {
                    txStatus = types_1.TransactionStatus.COMPLETE;
                }
            }
            const trx = new types_1.Transaction({
                chainId: this.chainConfig.chainId,
                hash: tx_hash,
                nonce,
                blockHash: "",
                blockNumber: block_number,
                transactionIndex: 0,
                from,
                to,
                value: new bignumber_js_1.default(amount),
                fee,
                feeToken: extra.fee_token === 0
                    ? this.chainConfig.nativeCurrency.symbol
                    : extra.fee_token,
                tokenAddress: "",
                timestamp: created_at,
                extra,
                status: txStatus,
                symbol: "",
                source: "",
            });
            const tokenInfo = yield this.getTokenInfo(token.id);
            if (tokenInfo) {
                trx.tokenAddress = tokenInfo.address;
                trx.symbol = tokenInfo.symbol;
                trx.value = trx.value.multipliedBy(10 ** tokenInfo.decimals);
            }
            return trx;
        });
    }
    getTransactionByHash(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            const _a = yield utils_1.request.HttpGet(`${this.chainConfig.api.url}/tx/${hash}`), { data, success } = _a, resExtra = __rest(_a, ["data", "success"]);
            const trx = yield this.convertTxToEntity(data);
            return trx;
        });
    }
    getTransactions(address, filter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = {
                txlist: [],
            };
            const _a = yield utils_1.request.HttpGet(`${this.chainConfig.api.url}/txs`, Object.assign({ address }, filter)), { data, success } = _a, resExtra = __rest(_a, ["data", "success"]);
            Object.assign(response, resExtra);
            if (success) {
                for (const row of data.data) {
                    const trx = yield this.convertTxToEntity(row);
                    if (trx) {
                        response.txlist.push(trx);
                    }
                }
            }
            return response;
        });
    }
    getTokenTransactions(address, tokenAddress, filter) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getTokenInfo(tokenAddress);
            if (!token || !token.id) {
                throw new Error(`${tokenAddress} Token Not Exists`);
            }
            const response = {
                txlist: [],
            };
            const _a = yield utils_1.request.HttpGet(`${this.chainConfig.api.url}/txs`, Object.assign({ address, token: token.id }, filter)), { data, success } = _a, resExtra = __rest(_a, ["data", "success"]);
            Object.assign(response, resExtra);
            if (success) {
                for (const row of data.data) {
                    const trx = yield this.convertTxToEntity(row);
                    if (trx) {
                        response.txlist.push(trx);
                    }
                }
            }
            return response;
        });
    }
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getTokenBalance(address, this.chainConfig.nativeCurrency.address);
        });
    }
    getBalances(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const { success, data } = yield utils_1.request.HttpGet(`${this.chainConfig.api.url}/overview/account/${address}`);
            if (success) {
                const res = [];
                for (const item of data.tokens) {
                    const tokenInfo = yield this.getTokenInfo(item.id);
                    if (tokenInfo) {
                        res.push({
                            token: tokenInfo.address,
                            balance: new bignumber_js_1.default(item.amount)
                                .multipliedBy(10 ** tokenInfo.decimals)
                                .toString(),
                        });
                    }
                }
                return res;
            }
            return [];
        });
    }
    getDecimals() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.chainConfig.nativeCurrency.decimals;
        });
    }
    getTokenBalance(address, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getTokenInfo(tokenAddress);
            if (!token) {
                throw new Error(`${tokenAddress} Token Not Exists`);
            }
            const { success, data } = yield utils_1.request.HttpGet(`${this.chainConfig.api.url}/overview/account/${address}`);
            if (success && Array.isArray(data)) {
                const mainToken = data.find(row => utils_1.core.equals(row.id, token.id));
                return new bignumber_js_1.default(mainToken && mainToken.amount);
            }
            return new bignumber_js_1.default(0);
        });
    }
    getTokenDecimals(tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getTokenInfo(tokenAddress);
            if (!token) {
                throw new Error(`${tokenAddress} Token Not Exists`);
            }
            if (token) {
                return Number(token.decimals);
            }
            return 0;
        });
    }
    getTokenSymbol(tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getTokenInfo(tokenAddress);
            if (!token) {
                throw new Error(`${tokenAddress} Token Not Exists`);
            }
            return token && token.symbol;
        });
    }
}
exports.ZKSpace = ZKSpace;
