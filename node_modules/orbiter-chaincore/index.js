"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.pubSub = exports.chains = exports.chainWatch = exports.chainService = exports.logger = exports.utils = exports.ScanChainMain = void 0;
const logger_1 = __importDefault(require("./src/utils/logger"));
exports.logger = logger_1.default;
const chainFactory_1 = require("./src/watch/chainFactory");
const utils = __importStar(require("./src/utils"));
exports.utils = utils;
const chainService = __importStar(require("./src/chain"));
exports.chainService = chainService;
const chainWatch = __importStar(require("./src/watch"));
exports.chainWatch = chainWatch;
require("cross-fetch/polyfill");
class ScanChainMain {
    constructor(configs, _option) {
        // TODO: IOption config
        if (!Array.isArray(configs)) {
            throw new Error("Chain Config Error");
        }
        utils.chains.fill(configs);
    }
    startScanChain(intranetId, addressList) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                let watchService;
                if (ScanChainMain.taskChain.has(intranetId)) {
                    watchService = ScanChainMain.taskChain.get(intranetId) || null;
                }
                else {
                    watchService = chainFactory_1.ChainFactory.createWatchChainByIntranetId(intranetId);
                    yield (watchService === null || watchService === void 0 ? void 0 : watchService.init());
                    const chainConfig = watchService.chain.chainConfig;
                    chainConfig.workingStatus = "pause";
                    if (Array.isArray(chainConfig.watch) && chainConfig.watch.length > 0) {
                        // await watchService.init()
                        try {
                            chainConfig.watch.includes("api") && watchService.apiScan();
                        }
                        catch (error) {
                            logger_1.default.error("Start API Scan Exception:", error.message);
                        }
                        try {
                            chainConfig.watch.includes("rpc") && watchService.rpcScan();
                        }
                        catch (error) {
                            logger_1.default.error("Start RPC Scan Exception:", error.message);
                        }
                        try {
                            if (chainConfig.watch.includes("alchemy-api")) {
                                // if (!watchService['alchemyApiScan']) {
                                //   return logger.error(`intranetId ${intranetId} alchemyApiScan Not implemented`);
                                // }
                                // watchService.rpcScan();
                            }
                        }
                        catch (error) {
                            logger_1.default.error("Start RPC Scan Exception:", error.message);
                        }
                    }
                    ScanChainMain.taskChain.set(intranetId, watchService);
                }
                addressList && (watchService === null || watchService === void 0 ? void 0 : watchService.addWatchAddress(addressList));
                logger_1.default.info(`Run Start Scan Chain: intranetId:${intranetId}, addressList:${JSON.stringify(addressList)}`);
                return watchService;
            }
            catch (error) {
                logger_1.default.error(`startScanChain Run Error:${error.message}, intranetId:${intranetId}, addressList:${JSON.stringify(addressList)}`);
            }
            return null;
        });
    }
    static reStartTask(intranetId) {
        const watchService = ScanChainMain.taskChain.get(intranetId) || null;
        if (watchService) {
            const chainConfig = watchService.chain.chainConfig;
            chainConfig.workingStatus = "pause";
            try {
                if (chainConfig.watch.includes("api")) {
                    watchService.apiScan().catch(error => {
                        logger_1.default.error(`reStartTask error API Scan intranetId:${intranetId}`, error);
                    });
                    logger_1.default.info(`reStartTask API Scan intranetId:${intranetId}`);
                }
            }
            catch (error) {
                logger_1.default.error("Start API Scan Exception:", error.message);
            }
            try {
                if (chainConfig.watch.includes("rpc")) {
                    watchService.rpcScan().catch(error => {
                        logger_1.default.error(`reStartTask error RPC Scan intranetId:${intranetId}`, error);
                    });
                    logger_1.default.info(`reStartTask API Scan intranetId:${intranetId}`);
                }
            }
            catch (error) {
                logger_1.default.error("Start RPC Scan Exception:", error.message);
            }
            return true;
        }
        return false;
    }
    resume(intranetId, _callback) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO:
            if (intranetId) {
                const taskChain = ScanChainMain.taskChain.get(intranetId);
                if (taskChain) {
                    taskChain.chain.chainConfig.workingStatus = "pause";
                }
            }
            else {
                ScanChainMain.taskChain.forEach((watch, _index) => {
                    watch.chain.chainConfig.workingStatus = "pause";
                });
            }
        });
    }
    pause(intranetId, _callback) {
        return __awaiter(this, void 0, void 0, function* () {
            // TODO:
            if (intranetId) {
                const taskChain = ScanChainMain.taskChain.get(intranetId);
                if (taskChain) {
                    taskChain.chain.chainConfig.workingStatus = "stop";
                }
            }
            else {
                ScanChainMain.taskChain.forEach((watch, _index) => {
                    watch.chain.chainConfig.workingStatus = "stop";
                });
            }
        });
    }
}
exports.ScanChainMain = ScanChainMain;
ScanChainMain.taskChain = new Map();
exports.chains = utils.chains;
exports.pubSub = utils.PubSub;
// eslint-disable-next-line
// @ts-ignorecd
BigInt.prototype.toJSON = function () {
    return this.toString();
};
