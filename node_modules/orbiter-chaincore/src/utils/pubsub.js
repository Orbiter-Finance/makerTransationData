"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PubSub = void 0;
class PubSub {
    constructor() {
        this.pubsubId = -1;
        this.topics = new Map();
    }
    subscribe(topic, callback, once = false) {
        var _a;
        if (typeof callback !== "function") {
            throw new TypeError("When subscribing for an event, a callback function must be defined.");
        }
        const obServer = {
            topic,
            id: String((this.pubsubId += 1)),
            callback,
            once,
        };
        if (this.topics.has(topic)) {
            (_a = this.topics.get(topic)) === null || _a === void 0 ? void 0 : _a.push(obServer);
        }
        else {
            this.topics.set(topic, [obServer]);
        }
        return obServer;
    }
    subscribeOnce(topic, callback) {
        return this.subscribe(topic, callback, true);
    }
    publish(topic, data, done) {
        if (!this.topics.has(topic)) {
            console.warn(`Topic does not exist ${topic}`);
            done && done(false);
            return false;
        }
        const topicObs = this.topics.get(topic);
        if (!topicObs || topicObs.length <= 0) {
            console.warn(`No clients are subscribed to this group ${topic}`);
            done && done(false);
            return false;
        }
        topicObs.forEach((ob) => {
            ob.callback(data, { topic, id: ob.id }, (result) => {
                done && done(result);
            });
            if (ob.once) {
                // cancel
                this.unSubscribe(ob.id);
            }
        });
        done && done(true);
    }
    unSubscribe(id) {
        this.topics.forEach((obs, topic) => {
            obs.forEach((ob, index) => {
                if (id === ob.id) {
                    obs.splice(index, 1);
                }
            });
            if (obs.length <= 0) {
                this.topics.delete(topic);
            }
        });
        return false;
    }
}
exports.PubSub = PubSub;
const PubSubMQ = new PubSub();
exports.default = PubSubMQ;
