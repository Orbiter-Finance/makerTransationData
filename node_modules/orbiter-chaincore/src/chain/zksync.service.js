"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZKSync = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const dayjs_1 = __importDefault(require("dayjs"));
const fs_extra_1 = require("fs-extra");
const path_1 = __importDefault(require("path"));
const types_1 = require("../types");
const utils = __importStar(require("../utils"));
/**
 * ZKSync 1.0
 * https://docs.zksync.io/apiv02-docs/
 */
class ZKSync {
    constructor(chainConfig) {
        this.chainConfig = chainConfig;
        this.tokens = [];
    }
    getLatestHeight() {
        return __awaiter(this, void 0, void 0, function* () {
            const { result } = yield utils.request.HttpGet(`${this.chainConfig.api.url}/blocks/lastCommitted`);
            return result && result["blockNumber"];
        });
    }
    getTokenList() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.tokens.length <= 0) {
                const { status, result } = yield utils.request.HttpGet(`${this.chainConfig.api.url}/tokens?from=0&limit=100&direction=newer`);
                if (utils.core.equals(status, "success") && Array.isArray(result.list)) {
                    this.tokens = result.list.map((row) => {
                        return {
                            id: row.id,
                            name: row.name,
                            symbol: row.symbol,
                            decimals: row.decimals,
                            address: row.address,
                        };
                    });
                    yield (0, fs_extra_1.outputJSONSync)(path_1.default.join(process.env.RUNTIME_DIR || "runtime", `token/${this.chainConfig.internalId}-tokens.json`), this.tokens);
                }
                return this.tokens;
            }
            return this.tokens;
        });
    }
    getTokenInfo(idOrAddrsss) {
        return __awaiter(this, void 0, void 0, function* () {
            if (idOrAddrsss === 0 ||
                idOrAddrsss === "0" ||
                idOrAddrsss === "0x0000000000000000000000000000000000000000") {
                return this.chainConfig.nativeCurrency;
            }
            const tokens = yield this.getTokenList();
            if (typeof idOrAddrsss === "string") {
                // check local config
                const localToken = this.chainConfig.tokens.find(t => utils.core.equals(t.address, idOrAddrsss));
                if (localToken) {
                    return localToken;
                }
                return tokens.find(token => utils.core.equals(token.address, idOrAddrsss));
            }
            else {
                return tokens.find(token => utils.core.equals(token.id, idOrAddrsss));
            }
        });
    }
    getConfirmations(_hashOrHeight) {
        throw new Error("Method not implemented.");
    }
    calcConfirmations(_targetHeight, _latestHeight) {
        throw new Error("Method not implemented.");
    }
    convertTxToEntity(data) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!data)
                return data;
            const { txHash, blockNumber, blockIndex, op, createdAt } = data, extra = __rest(data, ["txHash", "blockNumber", "blockIndex", "op", "createdAt"]);
            const { from, to, amount, fee, nonce, token } = op, opExtra = __rest(op, ["from", "to", "amount", "fee", "nonce", "token"]);
            let txStatus = types_1.TransactionStatus.Fail;
            if (extra.status === "committed") {
                txStatus = types_1.TransactionStatus.PENDING;
            }
            else if (extra.status === "finalized") {
                txStatus = types_1.TransactionStatus.COMPLETE;
            }
            const trx = new types_1.Transaction({
                chainId: this.chainConfig.chainId,
                hash: txHash,
                nonce,
                blockHash: blockIndex,
                blockNumber,
                transactionIndex: 0,
                from,
                to,
                value: new bignumber_js_1.default(amount),
                fee: String(fee),
                feeToken: "",
                tokenAddress: "",
                timestamp: (0, dayjs_1.default)(createdAt).unix(),
                extra: Object.assign(Object.assign({}, extra), opExtra),
                status: txStatus,
                symbol: "",
            });
            const tokenInfo = yield this.getTokenInfo(token);
            if (tokenInfo) {
                trx.symbol = tokenInfo.symbol;
                trx.feeToken = tokenInfo.symbol;
                trx.tokenAddress = tokenInfo.address;
            }
            return trx;
        });
    }
    getTransactionByHash(hash) {
        return __awaiter(this, void 0, void 0, function* () {
            const { status, error, result } = yield utils.request.HttpGet(`${this.chainConfig.api.url}/transactions/${hash}/data`);
            if (status === "success" && !error) {
                //
                return yield this.convertTxToEntity(result.tx);
            }
            return null;
        });
    }
    getTransactions(address, filter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = {
                txlist: [],
            };
            const { result } = yield utils.request.HttpGet(`${this.chainConfig.api.url}/accounts/${address}/transactions`, filter);
            if (result && Array.isArray(result.list)) {
                const { _list } = result, resExtra = __rest(result, ["_list"]);
                Object.assign(response, resExtra);
                if (result && result.list && result.list.length > 0) {
                    for (const tx of result.list) {
                        const trx = yield this.convertTxToEntity(tx);
                        if (trx) {
                            response.txlist.push(trx);
                        }
                    }
                }
            }
            return response;
        });
    }
    getTokenTransactions(address, tokenAddress, filter = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            return (yield this.getTransactions(address, filter)).filter((tx) => utils.core.equals(tx.tokenAddress, tokenAddress));
        });
    }
    getBalance(address) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.getTokenBalance(address, this.chainConfig.nativeCurrency.address);
        });
    }
    getBalances(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const { result } = yield utils.request.HttpGet(`${this.chainConfig.api.url}/accounts/${address}/committed`);
            if (result && result.balances) {
                const res = [];
                const tokenList = yield this.getTokenList();
                for (const key in result.balances) {
                    const tokenInfo = tokenList.find(item => item.symbol == key);
                    if (tokenInfo) {
                        res.push({
                            token: tokenInfo.address,
                            balance: result.balances[key],
                        });
                    }
                }
                return res;
            }
            return [];
        });
    }
    getDecimals() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.chainConfig.nativeCurrency.decimals;
        });
    }
    getTokenBalance(address, tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getTokenInfo(tokenAddress);
            if (!token) {
                throw new Error(`${tokenAddress} Token Not Exists`);
            }
            const { result } = yield utils.request.HttpGet(`${this.chainConfig.api.url}/accounts/${address}/committed`);
            if (result && result.balances && result.balances[token.symbol]) {
                return new bignumber_js_1.default(result.balances[token.symbol]);
            }
            return new bignumber_js_1.default(0);
        });
    }
    getTokenDecimals(tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getTokenInfo(tokenAddress);
            if (!token) {
                throw new Error(`${tokenAddress} Token Not Exists`);
            }
            return Number(token.decimals);
        });
    }
    getTokenSymbol(tokenAddress) {
        return __awaiter(this, void 0, void 0, function* () {
            const token = yield this.getTokenInfo(tokenAddress);
            if (!token) {
                throw new Error(`${tokenAddress} Token Not Exists`);
            }
            return token && token.symbol;
        });
    }
}
exports.ZKSync = ZKSync;
